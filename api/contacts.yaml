openapi: 3.1.0
info:
  title: Contacts API
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local
tags:
  - name: Contacts
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
  parameters:
    ContactId:
      name: id
      in: path
      required: true
      schema: { type: integer, format: int64, minimum: 1 }
  schemas:
    ErrorResponse:
      type: object
      properties:
        errors: { type: string }
      required: [errors]
    ContactRequest:
      type: object
      properties:
        first_name: { type: string, minLength: 1 }
        last_name:  { type: string, minLength: 1 }
        email:      { type: string, format: email }
        phone:
          oneOf:
            - { type: string }
            - { type: integer }
      required: [first_name, last_name, email, phone]
    Contact:
      type: object
      properties:
        id:         { type: integer, format: int64 }
        first_name: { type: string }
        last_name:  { type: string }
        email:      { type: string, format: email }
        phone:
          oneOf:
            - { type: string }
            - { type: integer }
      required: [id, first_name, last_name, email, phone]
    ContactEnvelope:
      type: object
      properties:
        data: { $ref: '#/components/schemas/Contact' }
      required: [data]
    ContactListEnvelope:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Contact' }
        paging:
          type: object
          properties:
            page:       { type: integer, minimum: 1 }
            total_page: { type: integer, minimum: 0 }
            total_item: { type: integer, minimum: 0 }
          required: [page, total_page, total_item]
      required: [data, paging]
paths:
  /api/contacts:
    post:
      tags: [Contacts]
      summary: Create Contact
      security: [{ ApiKeyAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ContactRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ContactEnvelope' }
        '400':
          description: Validation Error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

    get:
      tags: [Contacts]
      summary: Search Contacts
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: name
          description: Search by first_name or last_name (LIKE)
          schema: { type: string }
        - in: query
          name: email
          description: Search by email (LIKE)
          schema: { type: string }
        - in: query
          name: phone
          description: Search by phone (LIKE)
          schema:
            oneOf:
              - { type: string }
              - { type: integer }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, default: 10 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ContactListEnvelope' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /api/contacts/{id}:
    put:
      tags: [Contacts]
      summary: Update Contact
      security: [{ ApiKeyAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/ContactId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ContactRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ContactEnvelope' }
        '400':
          description: Validation Error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    get:
      tags: [Contacts]
      summary: Get Contact
      security: [{ ApiKeyAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/ContactId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ContactEnvelope' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    delete:
      tags: [Contacts]
      summary: Remove Contact
      security: [{ ApiKeyAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/ContactId' } ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { type: string, example: OK }
                required: [data]
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
